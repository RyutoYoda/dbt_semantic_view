{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.10.9", "generated_at": "2025-08-27T23:02:57.201893Z", "invocation_id": "26e65314-beaa-4ccd-8763-b26476dba26b", "invocation_started_at": "2025-08-27T23:02:54.411602Z", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-27T23:02:55.956278Z", "completed_at": "2025-08-27T23:02:55.957324Z"}, {"name": "execute", "started_at": "2025-08-27T23:02:55.958271Z", "completed_at": "2025-08-27T23:02:55.958280Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.015066146850585938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.snowflake_semantic_view_integration_tests.my_seed", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-27T23:02:55.944881Z", "completed_at": "2025-08-27T23:02:55.958701Z"}, {"name": "execute", "started_at": "2025-08-27T23:02:55.960485Z", "completed_at": "2025-08-27T23:02:55.960494Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018408775329589844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowflake_semantic_view_integration_tests.table_refer_to_raw_semantic_view", "compiled": true, "compiled_code": "\n\nselect * from semantic_view(temp.yutliu.raw_semantic_view metrics total_rows)", "relation_name": "temp.yutliu.table_refer_to_raw_semantic_view", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-27T23:02:55.963234Z", "completed_at": "2025-08-27T23:02:55.967549Z"}, {"name": "execute", "started_at": "2025-08-27T23:02:55.968290Z", "completed_at": "2025-08-27T23:02:55.968296Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.007141828536987305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowflake_semantic_view_integration_tests.base_table", "compiled": true, "compiled_code": "\n\nselect *\nfrom temp.yutliu_raw_data.my_seed", "relation_name": "temp.yutliu.base_table", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-27T23:02:55.965398Z", "completed_at": "2025-08-27T23:02:55.967781Z"}, {"name": "execute", "started_at": "2025-08-27T23:02:55.968761Z", "completed_at": "2025-08-27T23:02:55.968767Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005899906158447266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_semantic_view_integration_tests.base_table", "compiled": true, "compiled_code": "\n\n-- Passes when the seed has rows; fails if empty\nselect 'my_seed is empty' as error_message\nwhere not exists (\n  select 1 from temp.yutliu_raw_data.my_seed\n)", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-27T23:02:55.974066Z", "completed_at": "2025-08-27T23:02:55.976859Z"}, {"name": "execute", "started_at": "2025-08-27T23:02:55.977367Z", "completed_at": "2025-08-27T23:02:55.977371Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006173849105834961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowflake_semantic_view_integration_tests.semantic_view_basic", "compiled": true, "compiled_code": "\n\nTABLES(t1 AS temp.yutliu.base_table, t2 as temp.yutliu.base_table2)\nDIMENSIONS(t1.count as value, t2.volume as value)\nMETRICS(t1.total_rows AS SUM(t1.count), t2.max_volume as max(t2.volume))\nCOMMENT='test semantic view'", "relation_name": "temp.yutliu.semantic_view_basic", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-27T23:02:55.972274Z", "completed_at": "2025-08-27T23:02:55.977139Z"}, {"name": "execute", "started_at": "2025-08-27T23:02:55.977815Z", "completed_at": "2025-08-27T23:02:55.977819Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.006905317306518555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_semantic_view_integration_tests.table_refer_raw_semantic_view_matches_semantic_view", "compiled": true, "compiled_code": "\n\n-- Compare result of a table that refers to the raw semantic view to calling it directly\nwith table_ref as (\n  select * from temp.yutliu.table_refer_to_raw_semantic_view\n), sv as (\n  select * from semantic_view(temp.yutliu.raw_semantic_view metrics total_rows)\n)\nselect 'table refer raw result does not match semantic view result' as error_message\nfrom table_ref, sv\nwhere table_ref.total_rows != sv.total_rows", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-27T23:02:55.981996Z", "completed_at": "2025-08-27T23:02:55.987360Z"}, {"name": "execute", "started_at": "2025-08-27T23:02:55.987656Z", "completed_at": "2025-08-27T23:02:55.987664Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0078008174896240234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowflake_semantic_view_integration_tests.semantic_view_with_ca_extension", "compiled": true, "compiled_code": "\nTABLES(t1 AS temp.yutliu.base_table, t2 as temp.yutliu.base_table2)\nDIMENSIONS(t1.count as value, t2.volume as value)\nMETRICS(t1.total_rows AS SUM(t1.count), t2.max_volume as max(t2.volume))\nwith extension (CA = '{\"verified_queries\":[{\"name\":\"hi\", \"question\": \"hello\"}]')", "relation_name": "temp.yutliu.semantic_view_with_ca_extension", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-27T23:02:55.984772Z", "completed_at": "2025-08-27T23:02:55.988220Z"}, {"name": "execute", "started_at": "2025-08-27T23:02:55.988709Z", "completed_at": "2025-08-27T23:02:55.988713Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008265972137451172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowflake_semantic_view_integration_tests.semantic_view_with_config_copy_grants", "compiled": true, "compiled_code": "\nTABLES(t1 AS temp.yutliu.base_table)\nDIMENSIONS(t1.count as value)\nMETRICS(t1.total_rows AS SUM(t1.value))", "relation_name": "temp.yutliu.semantic_view_with_config_copy_grants", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-27T23:02:55.989555Z", "completed_at": "2025-08-27T23:02:55.993191Z"}, {"name": "execute", "started_at": "2025-08-27T23:02:55.993405Z", "completed_at": "2025-08-27T23:02:55.993408Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004988908767700195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowflake_semantic_view_integration_tests.semantic_view_with_copy_grants", "compiled": true, "compiled_code": "\nTABLES(t1 AS temp.yutliu.base_table)\nDIMENSIONS(t1.count as value)\nMETRICS(t1.total_rows AS SUM(t1.value))\nCOMMENT='test semantic view explicit copy grants'\nCOPY GRANTS", "relation_name": "temp.yutliu.semantic_view_with_copy_grants", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-27T23:02:55.991683Z", "completed_at": "2025-08-27T23:02:55.993797Z"}, {"name": "execute", "started_at": "2025-08-27T23:02:55.994427Z", "completed_at": "2025-08-27T23:02:55.994430Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.003317117691040039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowflake_semantic_view_integration_tests.table_refer_to_semantic_view", "compiled": true, "compiled_code": "\n\nselect *\nfrom semantic_view(temp.yutliu.semantic_view_basic metrics total_rows)", "relation_name": "temp.yutliu.table_refer_to_semantic_view", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-27T23:02:55.999942Z", "completed_at": "2025-08-27T23:02:56.003399Z"}, {"name": "execute", "started_at": "2025-08-27T23:02:56.003587Z", "completed_at": "2025-08-27T23:02:56.003590Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007879018783569336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_semantic_view_integration_tests.semantic_view_basic_has_comment", "compiled": true, "compiled_code": "\n\n-- Assert the semantic view's DDL contains the configured comment\nselect 'semantic view description missing' as error_message\nwhere position('comment=''test semantic view''' in lower(get_ddl('SEMANTIC_VIEW', 'temp.yutliu.semantic_view_basic'))) = 0", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-27T23:02:56.001938Z", "completed_at": "2025-08-27T23:02:56.004047Z"}, {"name": "execute", "started_at": "2025-08-27T23:02:56.004475Z", "completed_at": "2025-08-27T23:02:56.004478Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.004952669143676758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_semantic_view_integration_tests.semantic_view_basic_has_no_copy_grants", "compiled": true, "compiled_code": "\n\n-- Assert COPY GRANTS is absent when not in SQL or yaml\nselect 'COPY GRANTS unexpectedly present for SEMANTIC_VIEW_BASIC' as error_message\nwhere position(\n  'copy grants' in lower(get_ddl('SEMANTIC_VIEW', 'temp.yutliu.semantic_view_basic'))\n) > 0", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-27T23:02:56.005166Z", "completed_at": "2025-08-27T23:02:56.008566Z"}, {"name": "execute", "started_at": "2025-08-27T23:02:56.008750Z", "completed_at": "2025-08-27T23:02:56.008753Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004554033279418945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_semantic_view_integration_tests.semantic_view_sum_matches_base_table", "compiled": true, "compiled_code": "\n\n-- Compare sum(value) from BASE_TABLE to metric from semantic view\nwith base_sum as (\n  select sum(value) as v from temp.yutliu.base_table\n), sv as (\n  select * from semantic_view(temp.yutliu.semantic_view_basic metrics total_rows)\n)\nselect 'semantic view metric does not match base_table sum' as error_message\nfrom base_sum, sv\nwhere base_sum.v != sv.total_rows", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-27T23:02:56.007121Z", "completed_at": "2025-08-27T23:02:56.009202Z"}, {"name": "execute", "started_at": "2025-08-27T23:02:56.009554Z", "completed_at": "2025-08-27T23:02:56.009557Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.002895832061767578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_semantic_view_integration_tests.semantic_view_with_ca_extension_has_extension", "compiled": true, "compiled_code": "\n\n-- Assert the CA extension is present with expected values via GET_DDL\nselect 'CA extension missing or values mismatch for SEMANTIC_VIEW_WITH_CA_EXTENSION' as error_message\nwhere not (\n  position('ca' in lower(get_ddl('SEMANTIC_VIEW', 'temp.yutliu.semantic_view_with_ca_extension'))) > 0\n  and position('\"verified_queries\":[{\"name\":\"hi\", \"question\": \"hello\"}]' in lower(get_ddl('SEMANTIC_VIEW', 'temp.yutliu.semantic_view_with_ca_extension'))) > 0\n)", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-27T23:02:56.010152Z", "completed_at": "2025-08-27T23:02:56.014100Z"}, {"name": "execute", "started_at": "2025-08-27T23:02:56.014276Z", "completed_at": "2025-08-27T23:02:56.014279Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00494384765625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_semantic_view_integration_tests.semantic_view_with_copy_has_copy_grants", "compiled": true, "compiled_code": "\n\n-- Assert COPY GRANTS is present in DDL when specified in SQL\nselect 'COPY GRANTS missing for SEMANTIC_VIEW_WITH_COPY_GRANTS' as error_message\nwhere position(\n  'copy grants' in lower(get_ddl('SEMANTIC_VIEW', 'temp.yutliu.semantic_view_with_copy_grants'))\n) = 0", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-27T23:02:56.011807Z", "completed_at": "2025-08-27T23:02:56.014572Z"}, {"name": "execute", "started_at": "2025-08-27T23:02:56.014741Z", "completed_at": "2025-08-27T23:02:56.014743Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0033621788024902344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_semantic_view_integration_tests.table_refer_semantic_view_matches_semantic_view", "compiled": true, "compiled_code": "\n\n-- Compare result of a table that refers to the semantic view to calling the semantic view directly\nwith table_ref as (\n  select * from temp.yutliu.table_refer_to_semantic_view\n), sv as (\n  select * from semantic_view(temp.yutliu.semantic_view_basic metrics total_rows)\n)\nselect 'table refer result does not match semantic view result' as error_message\nfrom table_ref, sv\nwhere table_ref.total_rows != sv.total_rows", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-27T23:02:55.953574Z", "completed_at": "2025-08-27T23:02:56.729827Z"}, {"name": "execute", "started_at": "2025-08-27T23:02:56.730315Z", "completed_at": "2025-08-27T23:02:56.730331Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.7876050472259521, "adapter_response": {}, "message": null, "failures": null, "unique_id": "operation.snowflake_semantic_view_integration_tests.snowflake_semantic_view_integration_tests-on-run-start-1", "compiled": true, "compiled_code": "\n  \n  \n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-27T23:02:55.950593Z", "completed_at": "2025-08-27T23:02:56.805071Z"}, {"name": "execute", "started_at": "2025-08-27T23:02:56.805750Z", "completed_at": "2025-08-27T23:02:56.805769Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.8634147644042969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "operation.snowflake_semantic_view_integration_tests.snowflake_semantic_view_integration_tests-on-run-start-0", "compiled": true, "compiled_code": "\n  \n  \n", "relation_name": null, "batch_results": null}], "elapsed_time": 2.3490540981292725, "args": {"use_colors": true, "compile": true, "partial_parse_file_diff": true, "exclude": [], "log_format": "default", "print": true, "which": "generate", "profiles_dir": "/Users/yutliu/snowflake_semantic_view/snowflake_semantic_view/integration_tests", "upload_to_artifacts_ingest_api": false, "require_batched_execution_for_custom_microbatch_strategy": false, "require_explicit_package_overrides_for_builtin_materializations": true, "indirect_selection": "eager", "log_path": "/Users/yutliu/snowflake_semantic_view/snowflake_semantic_view/integration_tests/logs", "require_all_warnings_handled_by_warn_error": false, "select": [], "introspect": true, "log_format_file": "debug", "send_anonymous_usage_stats": false, "state_modified_compare_more_unrendered_values": false, "skip_nodes_if_on_run_start_fails": false, "show_resource_report": false, "log_level_file": "debug", "state_modified_compare_vars": false, "use_colors_file": true, "require_yaml_configuration_for_mf_time_spines": false, "target": "snowflake", "populate_cache": true, "source_freshness_run_project_hooks": true, "favor_state": false, "cache_selected_only": false, "require_generic_test_arguments_property": true, "invocation_command": "dbt docs generate --target snowflake", "log_file_max_bytes": 10485760, "strict_mode": false, "partial_parse": true, "printer_width": 80, "quiet": false, "require_resource_names_without_spaces": true, "use_fast_test_edges": false, "validate_macro_args": false, "require_nested_cumulative_type_params": false, "warn_error_options": {"error": [], "warn": [], "silence": []}, "vars": {}, "static_parser": true, "write_json": true, "log_level": "info", "project_dir": "/Users/yutliu/snowflake_semantic_view/snowflake_semantic_view/integration_tests", "defer": false, "macro_debugging": false, "show_all_deprecations": false, "empty_catalog": false, "static": false, "version_check": true}}